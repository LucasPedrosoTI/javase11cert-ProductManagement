		//		pm.createProduct(103, "Coke", BigDecimal.valueOf(1.99), Rating.NOT_RATED);
		//
		//		pm.reviewProduct(103, Rating.FOUR_STARS, "Nice hot cup of tea");
		//		pm.reviewProduct(103, Rating.TWO_STARS, "Bad hot cup of tea");
		//		pm.reviewProduct(103, Rating.ONE_STAR, "Cool hot cup of tea");
		//		pm.reviewProduct(103, Rating.ONE_STAR, "Great hot cup of tea");
		//		pm.reviewProduct(103, Rating.FIVE_STARS, "Excellent hot cup of tea");
		//		pm.reviewProduct(103, Rating.THREE_STARS, "Average hot cup of tea");
		//
		//		pm.dumpData();
		//		pm.restoreData();
		//
		//		pm.printProductReport(101, "pt-BR");
		//		pm.printProductReport(102, "en-US");
		//		pm.printProductReport(103, "es-EN");

		//		pm.parseProduct("D,101,Tea,1.99,0,2021-12-10");
		//		pm.parseReview("101,3,Nice tea");
		//		pm.printProductReport(101);

		//		pm.createProduct(103, "Coke", BigDecimal.valueOf(3.99), Rating.NOT_RATED);
		//		pm.reviewProduct(103, Rating.FIVE_STARS, "Nice hot cup of tea");
		//		pm.reviewProduct(103, Rating.FIVE_STARS, "Nice hot cup of tea");
		//		
		//		pm.printProductReport(103);

		//		pm.createProduct(102, "Coffee", BigDecimal.valueOf(2.99), Rating.NOT_RATED);
		//		pm.reviewProduct(102, Rating.FOUR_STARS, "Nice hot cup of tea");
		//		pm.reviewProduct(102, Rating.FOUR_STARS, "Nice hot cup of tea");
		//		pm.reviewProduct(102, Rating.FOUR_STARS, "Nice hot cup of tea");
		//		pm.printProductReport(102);

		//		pm.changeLocale("en-US");

		//		try {
		//			Product p1 = pm.findProduct(102);
		//			Product p2 = pm.findProduct(104);
		//			LOGGER.info(() -> "Found product: " + p1.toString());
		//			LOGGER.info(() -> "Found product: " + p2.toString());
		//		} catch (Exception e) {
		//			LOGGER.severe("Product not found");
		//			LOGGER.severe(e.getMessage());
		//		}

		// orderna por preco DESC
		//		final Comparator<Product> priceSorterDesc = (Product p1, Product p2) -> p2.getPrice().compareTo(p1.getPrice());
		//		final Predicate<Product> priceFilter = p -> p.getPrice().doubleValue() > 2;
		//		pm.printProducts(priceFilter, priceSorterDesc);
		// ORDENA POR NOME ASC e DESC
		// pm.printProducts((var p1, var p2) ->
		// p1.getName().compareToIgnoreCase(p2.getName()));
		// pm.printProducts((p1, p2) -> p2.getName().compareToIgnoreCase(p1.getName()));
		// ORDENA POR RATING ASC E DESC
		//		final Comparator<Product> ratingSorterAsc = (p1, p2) -> p1.getRating().compareTo(p2.getRating());
		// pm.printProducts(ratingSorterAsc);
		// pm.printProducts((p1, p2) -> p2.getRating().compareTo(p1.getRating()));

		// pm.printProducts(ratingSorterAsc.thenComparing(priceSorterDesc));
		// pm.printProducts(ratingSorterAsc.thenComparing(priceSorterDesc).reversed());

		//		pm.getDiscounts().forEach((rating, discount) -> LOGGER.info(rating + "\t" + discount));